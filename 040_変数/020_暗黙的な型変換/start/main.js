/**
 * データ型
 * 
 * 変数が持っているデータの種類
 * ・真偽値
 * ・数値
 * ・文字列
 * ・undefined
 * ・null
 * ・シンボル　一意の値
 * ・BigInt　12n
 * 　　数値に似ている。桁が多い数値に対して用いる。使う場合は数値の後ろにnをつける。
 * 　　新しい型なので、20年時点ではSafariは未対応だった。
 * ・オブジェクト
*/





/**
 * 暗黙的な型変換
 * 
 * 変数が呼ばれた状況によって、変数の型が自動的に変換されること
 * ex) 文字列として定義された変数が数値として取り扱われる
*/


/**
 * 言語によって、型宣言が異なる
 * 
 * ◎ 動的型付け言語
 * ・変数を宣言するときに、型の宣言を行わない
 * ・変数を使用する状況によって、変数の型が変更される
 * ・記述量が少ない、小さいプロジェクトに向いている。
 * 
 * jsは動的型付け言語である。
 * 
 * ex) let a = 0;
 * 
 * 
 * ◎ 静的型付け言語
 * ・変数宣言時に型の宣言をする
 * ・変数を使用する状況によらず、常に同じ型を保持している
 *  ・大きいプロジェクトだと、静的のほうが型がどうなっているか理解しやすく、メンテナンス性が上がる
 * ・型があらかじめわかっているので、プログラム実行時のパフォーマンスがよくなる
 * 
 * JavaやC言語は静的型付け言語である。
 * 
 * ex) int a = 0;(整数値を定義する場合はintを用いる)
*/


let printTypeAndValue = (val) => {
  console.log(typeof val, val); 
}

let a = 0;
printTypeAndValue(a); // number


let b = '1' + a;
printTypeAndValue(b); // string 10
// データ型が違う場合、どちらかのデータ型に合わせてから「＋」の演算子を使う
// 今回は「1」の文字列のほうに、aの数値型が変換される
// 「1」の文字列と「0」の文字列が＋で結合され、文字列の10ができる


let c = 15 - b;
printTypeAndValue(c); // number 5
// bに入っている文字列「10」が数値に変換され、15 - 10 = 5と計算される


let d = c - null;
printTypeAndValue(d); // number 5
// nullが数値の「0」に暗黙的に変換される。
// 5 - 0 となり、数値の型の「5」がそのまま格納されている。


let e = d - true;
printTypeAndValue(e); // number 4
// 数値との計算の場合、trueは「1」falseは「0」とみなされる
// 5 - 1 = 4となる


// 文字列を数値に変換するparseInt
let f = parseInt('100') + a; // number 100
printTypeAndValue(f);