/**
 * クロージャー
 * レキシカルスコープの変数を関数が使用している状態
 * 
 * 
*/

function fn1(){
  let b = 1;
  function fn2(){
    console.log(b);
  }
  fn2();
}
fn1();

/**
 * 関数fn2からconsole.log(b)のbに対して、レキシカルスコープの値（let b = 1の1のこと）を
 * 参照しに行っている。
 * 
 * 内側に定義されている関数から歴史カルスコープの変数への参照を保持している場合、
 * この状態を「クロージャー」と呼ぶ。
*/


/**
 * クロージャーを使う例
 * 
 * ・プライベート変数の定義
 * 　関数の外部からアクセスできない変数のこと
 * 
 * ・動的な関数生成
 * 　状況に応じて異なる関数
*/





